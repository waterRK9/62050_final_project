$date
	Sun Nov 13 23:53:43 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module image_audio_splitter_tb $end
$var wire 1 ! pixel_axiov $end
$var wire 8 " pixel [7:0] $end
$var wire 1 # audio_axiov $end
$var wire 8 $ audio [7:0] $end
$var wire 1 % addr_axiov $end
$var wire 24 & addr [23:0] $end
$var reg 2 ' axiid [1:0] $end
$var reg 1 ( axiiv $end
$var reg 1 ) clk $end
$var reg 1 * rst $end
$scope module image_audio_splitter $end
$var wire 2 + axiid [1:0] $end
$var wire 1 ( axiiv $end
$var wire 1 ) clk $end
$var wire 1 * rst $end
$var reg 24 , addr [23:0] $end
$var reg 1 % addr_axiov $end
$var reg 8 - audio [7:0] $end
$var reg 1 # audio_axiov $end
$var reg 3 . byte_bit_counter [2:0] $end
$var reg 9 / output_counter [8:0] $end
$var reg 8 0 pixel [7:0] $end
$var reg 1 ! pixel_axiov $end
$var reg 2 1 state [1:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 2 i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 3 i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 4 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 4
b0 3
b0 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
0*
0)
x(
bx '
bx &
x%
bx $
x#
bx "
x!
$end
#10000000000000
b0 .
b0 /
b1 1
1)
#20000000000000
0)
1*
#30000000000000
0#
0!
0%
b0 $
b0 -
b0 "
b0 0
b0 &
b0 ,
1)
#40000000000000
0)
0*
#50000000000000
b10 /
b10000000000000000 &
b10000000000000000 ,
b10 .
1)
b1 '
b1 +
1(
#60000000000000
0)
#70000000000000
b100 /
b1010000000000000000 &
b1010000000000000000 ,
b100 .
1)
b1 2
#80000000000000
0)
#90000000000000
b110 /
b101010000000000000000 &
b101010000000000000000 ,
b110 .
1)
b10 2
#100000000000000
0)
#110000000000000
b1000 /
b10101010000000000000000 &
b10101010000000000000000 ,
b0 .
1)
b11 2
#120000000000000
0)
#130000000000000
b1010 /
b10101010000000100000000 &
b10101010000000100000000 ,
b10 .
1)
b100 2
#140000000000000
0)
#150000000000000
b1100 /
b10101010000010100000000 &
b10101010000010100000000 ,
b100 .
1)
b101 2
#160000000000000
0)
#170000000000000
b1110 /
b10101010001010100000000 &
b10101010001010100000000 ,
b110 .
1)
b110 2
#180000000000000
0)
#190000000000000
b10000 /
b10101010101010100000000 &
b10101010101010100000000 ,
b0 .
1)
b111 2
#200000000000000
0)
#210000000000000
b10010 /
b10101010101010100000001 &
b10101010101010100000001 ,
b10 .
1)
b1000 2
#220000000000000
0)
#230000000000000
b10100 /
b10101010101010100000101 &
b10101010101010100000101 ,
b100 .
1)
b1001 2
#240000000000000
0)
#250000000000000
b10110 /
b10101010101010100010101 &
b10101010101010100010101 ,
b110 .
1)
b1010 2
#260000000000000
0)
#270000000000000
b10 1
b0 /
1%
b10101010101010101010101 &
b10101010101010101010101 ,
b0 .
1)
b1011 2
#280000000000000
0)
#290000000000000
0%
b10 .
1)
b0 '
b0 +
b1100 2
#300000000000000
0)
#310000000000000
b1000000 "
b1000000 0
b100 .
1)
b1 '
b1 +
b1 3
#320000000000000
0)
#330000000000000
b10010000 "
b10010000 0
b110 .
1)
b10 '
b10 +
b10 3
#340000000000000
0)
#350000000000000
b11100100 "
b11100100 0
1!
b0 .
1)
b11 '
b11 +
b11 3
#360000000000000
0)
#370000000000000
b111001 "
b111001 0
0!
b10 .
1)
b0 '
b0 +
b100 3
#380000000000000
0)
#390000000000000
b1001110 "
b1001110 0
b100 .
1)
b1 '
b1 +
b1 4
#400000000000000
0)
#410000000000000
b10010011 "
b10010011 0
b110 .
1)
b10 '
b10 +
b10 4
#420000000000000
0)
#430000000000000
b11100100 "
b11100100 0
1!
b0 .
1)
b11 '
b11 +
b11 4
#440000000000000
0)
#450000000000000
b11111001 "
b11111001 0
0!
b10 .
1)
b100 4
#460000000000000
0)
#470000000000000
b11111110 "
b11111110 0
b100 .
1)
#480000000000000
0)
#490000000000000
b11111111 "
b11111111 0
b110 .
1)
